{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"gOAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAG3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCLpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCN5BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKd,UAAU,QAAf,SACGc,KCuGDC,EAAS,WAOb,OACE,sBAAKC,MAPa,CAElBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GA+FSC,EA1FH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IAEH,IA0CMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAAvC,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA5CD,SAAAc,GACzB,IAAMf,EAAO0B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQ1C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACUpB,EAAI2B,GACXhC,MAAK,SAAAiC,GACJhB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO2C,SAEpDC,OAAM,SAAAC,GAELZ,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGfyC,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,SA2BRgC,CAAmB/C,EAAKe,MAF3Cf,EAAKe,SAMhB,uBAAMiC,SAhEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB9C,QAASuB,EACTwB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAG7BrB,EACUgB,GACPzC,MAAK,SAAAiC,GACJhB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,QAoDb,UACE,uBACE6B,MAAO9B,EACP+B,SA9BiB,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB7B,EAAWoB,EAAMa,OAAOJ,UA8BpB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC5MNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.80eb531f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important';\n\n  // React uses className attribute (instead of class attribute for regular HTML)\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;","import axios from 'axios';\n// const baseUrl = 'http://localhost:3001/api/notes';\n\n// Declare baseUrl using relative URL since both frontend and\n//  backend are at the same address\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n// a shorter syntax\nexport default { getAll, create, update };\n\n// export default {\n//   getAll: getAll,\n//   create: create,\n//   update: update\n// };\n\n","// Implement error message\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;","// // ---------------- IMPROVED ERROR MESSAGE ----------------- //\n// // You have to toggle \"Make importance\" button of\n// // `This note is not saved to server` to display the\n// // error message.\n// import React, { useState, useEffect } from 'react';\n// import Note from './components/Note';\n// import noteService from './services/notes';\n// import Notification from './components/Notification';\n\n// const App = () => {\n//   const [notes, setNotes] = useState([]);\n//   const [newNote, setNewNote] = useState('');\n//   const [showAll, setShowAll] = useState(false);\n//   const [errorMessage, setErrorMessage] = useState(null);\n\n//   useEffect(() => {\n//     noteService\n//       .getAll()\n//       .then(initialNotes => {\n//         setNotes(initialNotes);\n//       });\n//   }, []);\n\n//   const addNote = (event) => {\n//     event.preventDefault();\n//     const noteObject = {\n//       content: newNote,\n//       date: new Date().toISOString(),\n//       important: Math.random() > 0.5,\n//     };\n\n//     noteService\n//       .create(noteObject)\n//       .then(returnedNote => {\n//         setNotes(notes.concat(returnedNote));\n//         setNewNote('');\n//       });\n//   };\n\n//   const toggleImportanceOf = id => {\n//     const note = notes.find(n => n.id === id);\n//     const changedNote = { ...note, important: !note.important };\n\n//     noteService\n//       .update(id, changedNote)\n//       .then(returnedNote => {\n//         setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n//       })\n//       .catch(error => {\n//         // add logic for displaying the error message\n//         setErrorMessage(\n//           `Note '${note.content}' was already removed from server`\n//         );\n//         setTimeout(() => {\n//           setErrorMessage(null);\n//         }, 5000);\n//         setNotes(notes.filter(n => n.id !== id));\n//       });\n//   };\n\n//   const handleNoteChange = (event) => {\n//     console.log(event.target.value);\n//     setNewNote(event.target.value);\n//   };\n\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important);\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <Notification message={errorMessage} />\n//       <div>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all'}\n//         </button>\n//       </div>\n//       <ul>\n//         {notesToShow.map(note =>\n//           <Note\n//             key={note.id}\n//             note={note}\n//             toggleImportance={() => toggleImportanceOf(note.id)}\n//           />\n//         )}\n//       </ul>\n//       <form onSubmit={addNote}>\n//         <input\n//           value={newNote}\n//           onChange={handleNoteChange}\n//         />\n//         <button type=\"submit\">save</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// ---------------- INLINE STYLES ----------------- //\n// React bases the division of application along the lines\n// of its logical functional entities, a complete opposite\n// practice compared to traditional writing of CSS, HTML and JS\n// into separate files\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\nimport Notification from './components/Notification';\n\nconst Footer = () => {\n  const footerStyle = {\n    // Each CSS property is defined differently in JS\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes);\n      });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote('');\n      });\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n      })\n      .catch(error => {\n        // add logic for displaying the error message\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// importing css\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}